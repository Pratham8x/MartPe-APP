/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 */
const documents = {
    "\n  #graphql\n  query GetAllCarts($withItemDetails: Boolean) {\n    getAllCarts(withItemDetails: $withItemDetails) {\n      id\n      items {\n        itemId\n        quantity\n        details {\n          descriptor {\n            name\n            symbol\n          }\n          price {\n            value\n            maximum_value\n          }\n          meta {\n            ondc_org_cancellable\n          }\n          quantity {\n            maximum {\n              count\n            }\n            available {\n              count\n            }\n          }\n          catalog_id\n          category_id\n        }\n      }\n      store {\n        id\n        descriptor {\n          name\n          symbol\n        }\n        domain\n        geoLocation {\n          lat\n          lng\n        }\n        address {\n          street\n        }\n      }\n      customizations {\n        baseItemId\n        details {\n          descriptor {\n            name\n          }\n          price {\n            value\n          }\n        }\n        itemId\n        quantity\n      }\n    }\n  }\n": types.GetAllCartsDocument,
    "\n  #graphql\n  mutation AddItemToCart(\n    $vendorId: String!\n    $itemId: String!\n    $quantity: Int!\n    $customizations: [CartCustomItemInputType!]\n  ) {\n    addItemToCart(\n      vendor_id: $vendorId\n      itemId: $itemId\n      quantity: $quantity\n      customizations: $customizations\n    ) {\n      customizations {\n        baseItemId\n        itemId\n        quantity\n      }\n      id\n      storeId\n      items {\n        itemId\n        quantity\n      }\n      userId\n    }\n  }\n": types.AddItemToCartDocument,
    "\n  #graphql\n  mutation ClearCart($vendorId: String!) {\n    clearCart(vendor_id: $vendorId)\n  }\n": types.ClearCartDocument,
    "\n  #graphql\n  mutation clearAllCarts {\n    clearAllCarts\n  }\n": types.ClearAllCartsDocument,
    "\n  #graphql\n  mutation RemoveItemFromCart($vendorId: String!, $itemId: String!) {\n    removeItemFromCart(vendor_id: $vendorId, itemId: $itemId) {\n      customizations {\n        baseItemId\n        itemId\n        quantity\n      }\n      id\n      items {\n        itemId\n        quantity\n      }\n      storeId\n      userId\n    }\n  }\n": types.RemoveItemFromCartDocument,
    "\n  #graphql\n  mutation UpdateItemQuantity(\n    $vendorId: String!\n    $itemId: String!\n    $quantity: Int!\n  ) {\n    updateItemQuantity(\n      vendor_id: $vendorId\n      itemId: $itemId\n      quantity: $quantity\n    ) {\n      customizations {\n        baseItemId\n        itemId\n        quantity\n      }\n      id\n      items {\n        itemId\n        quantity\n      }\n      storeId\n      userId\n    }\n  }\n": types.UpdateItemQuantityDocument,
    "\n  query GetDomainPageData(\n    $domain: String!\n    $loc: Location!\n    $cityCode: String!\n  ) {\n    getDomainPageData(domain: $domain, loc: $loc, cityCode: $cityCode) {\n      stores {\n        descriptor {\n          name\n          images\n          symbol\n        }\n        domain\n        id\n        distance\n        catalogs {\n          descriptor {\n            name\n            images\n            short_desc\n          }\n          id\n          category_id\n          price {\n            maximum_value\n            offer_percent\n            value\n          }\n          quantity {\n            available {\n              count\n            }\n            maximum {\n              count\n            }\n            unitized {\n              measure {\n                unit\n                value\n              }\n            }\n          }\n        }\n        address {\n          street\n        }\n        geoLocation {\n          lat\n          lng\n        }\n        calculated_max_offer {\n          percent\n        }\n        time_to_ship_in_hours {\n          avg\n        }\n      }\n      offers {\n        calculated_max_offer {\n          percent\n        }\n        descriptor {\n          name\n          symbol\n          images\n        }\n        id\n      }\n    }\n  }\n": types.GetDomainPageDataDocument,
    "\n  query GetUserFavourites {\n    getUserFavourites {\n      products\n      vendors\n    }\n  }\n": types.GetUserFavouritesDocument,
    "\n  mutation AddProductToFavs($productId: String!) {\n    addProductToFavs(productId: $productId) {\n      success\n      message\n    }\n  }\n": types.AddProductToFavsDocument,
    "\n  mutation RemoveProductFromFavs($productId: String!) {\n    removeProductFromFavs(productId: $productId) {\n      success\n      message\n    }\n  }\n": types.RemoveProductFromFavsDocument,
    "\n  query GetUserFavouritesWithDetails {\n    getUserFavouritesWithDetails {\n      products {\n        id\n        descriptor {\n          images\n          name\n        }\n        price {\n          maximum_value\n          offer_percent\n          offer_value\n          value\n        }\n        quantity {\n          available {\n            count\n          }\n          maximum {\n            count\n          }\n        }\n        provider {\n          descriptor {\n            name\n          }\n          panIndia\n          hyperLocal\n          address {\n            city\n            locality\n            state\n          }\n        }\n        vendor_id\n      }\n      vendors {\n        city_code\n        address {\n          locality\n          city\n          state\n        }\n\n        panIndia\n        provider_id\n        id\n        descriptor {\n          images\n          name\n          symbol\n        }\n      }\n    }\n  }\n": types.GetUserFavouritesWithDetailsDocument,
    "\n  mutation AddVendorToFavs($vendorId: String!) {\n    addVendorToFavs(vendorId: $vendorId) {\n      success\n      message\n    }\n  }\n": types.AddVendorToFavsDocument,
    "\n  mutation RemoveVendorFromFavs($vendorId: String!) {\n    removeVendorFromFavs(vendorId: $vendorId) {\n      success\n      message\n    }\n  }\n": types.RemoveVendorFromFavsDocument,
    "\n  #graphql\n  query GetHome($loc: Location!, $cityCode: String!) {\n    getHome(loc: $loc, cityCode: $cityCode) {\n      offers {\n        descriptor {\n          name\n          short_desc\n          symbol\n        }\n        id\n        calculated_max_offer {\n          percent\n          value\n        }\n      }\n      restaurants {\n        distance\n        descriptor {\n          images\n          long_desc\n          name\n          short_desc\n          symbol\n        }\n        id\n        address {\n          locality\n        }\n        geoLocation {\n          lat\n          lng\n        }\n        provider_id\n        distance\n      }\n      stores {\n        distance\n        descriptor {\n          images\n          long_desc\n          name\n          short_desc\n          symbol\n        }\n        id\n        address {\n          locality\n        }\n        geoLocation {\n          lat\n          lng\n        }\n        provider_id\n        distance\n      }\n    }\n  }\n": types.GetHomeDocument,
    "\n  #graphql\n  mutation GenerateOTP($sendTo: String!) {\n    generateOTP(sendTo: $sendTo) {\n      message\n      orderId\n    }\n  }\n": types.GenerateOtpDocument,
    "\n  #graphql\n  mutation VerifyOTP($orderId: String!, $otp: String!, $sendTo: String!) {\n    verifyOTP(orderId: $orderId, otp: $otp, sendTo: $sendTo) {\n      token\n      user {\n        firstName\n        # savedAddresses {\n        #   id\n        #   type\n        #   name\n        #   address {\n        #     line1\n        #     line2\n        #   }\n        #   locality\n        #   city\n        #   state\n        #   pincode\n        #   isDefault\n        # }\n        phoneNumber\n        email\n        lastName\n        id\n      }\n      isOTPVerified\n    }\n  }\n": types.VerifyOtpDocument,
    "\n  #graphql\n  mutation ResendOTP($orderId: String!) {\n    resendOTP(orderId: $orderId) {\n      message\n      orderId\n    }\n  }\n": types.ResendOtpDocument,
    "\n  #graphql\n  query GetAllOrdersByUser {\n    getAllOrdersByUser {\n      id\n      fulfillments {\n        pending {\n          state {\n            descriptor {\n              code\n            }\n          }\n        }\n        packed {\n          state {\n            descriptor {\n              code\n            }\n          }\n        }\n        agent_assigned {\n          state {\n            descriptor {\n              code\n            }\n          }\n        }\n        out_for_pickup {\n          state {\n            descriptor {\n              code\n            }\n          }\n        }\n        pickup_failed {\n          state {\n            descriptor {\n              code\n            }\n          }\n        }\n        order_picked_up {\n          state {\n            descriptor {\n              code\n            }\n          }\n        }\n        in_transit {\n          state {\n            descriptor {\n              code\n            }\n          }\n        }\n        at_destination_hub {\n          state {\n            descriptor {\n              code\n            }\n          }\n        }\n        out_for_delivery {\n          state {\n            descriptor {\n              code\n            }\n          }\n        }\n        delivery_failed {\n          state {\n            descriptor {\n              code\n            }\n          }\n        }\n        order_delivered {\n          state {\n            descriptor {\n              code\n            }\n          }\n        }\n        cancelled {\n          state {\n            descriptor {\n              code\n            }\n          }\n        }\n      }\n      items {\n        details {\n          descriptor {\n            name\n            symbol\n          }\n          catalog_id\n        }\n      }\n      order_status\n      quote {\n        breakup {\n          details {\n            price {\n              value\n            }\n          }\n          price {\n            value\n          }\n          quantity {\n            count\n          }\n          type\n          title\n          id\n        }\n        price {\n          value\n        }\n      }\n      store {\n        descriptor {\n          symbol\n          name\n        }\n        address {\n          street\n        }\n      }\n      placed_at\n      completed_at\n      cancelled_at\n      cancellation {\n        reason {\n          reason\n        }\n        cancelled_by\n      }\n    }\n  }\n": types.GetAllOrdersByUserDocument,
    "\n  query GetAllReasonCodes {\n    #graphql\n    getAllReasonCodes {\n      reason\n      is_trigger_rto\n      is_applicable_for_part_cancel\n      id\n      cost_attributed_to\n      code_for\n      comment\n      code\n    }\n  }\n": types.GetAllReasonCodesDocument,
    "\n  query GetProductById($getProductByIdId: String!) {\n    getProductById(id: $getProductByIdId) {\n      descriptor {\n        images\n        long_desc\n        name\n        short_desc\n        symbol\n      }\n      custom_group\n\n      customizable\n      attributes\n      domain\n      variants\n      attributes\n      domainName\n      price {\n        maximum_value\n        offer_percent\n        offer_value\n        value\n      }\n      quantity {\n        available {\n          count\n        }\n        maximum {\n          count\n        }\n        unitized {\n          measure {\n            unit\n            value\n          }\n        }\n      }\n      time_to_ship_in_hours\n      custom_group\n\n      meta {\n        ondc_org_cancellable\n        ondc_org_available_on_cod\n        ondc_org_contact_details_consumer_care\n        ondc_org_fssai_license_no\n        ondc_org_mandatory_reqs_veggies_fruits {\n          net_quantity\n        }\n        ondc_org_return_window\n        ondc_org_returnable\n        ondc_org_seller_pickup_return\n        ondc_org_statutory_reqs_packaged_commodities {\n          common_or_generic_name_of_commodity\n          manufacturer_or_packer_address\n          manufacturer_or_packer_name\n          month_year_of_manufacture_packing_import\n          net_quantity_or_measure_of_commodity_in_pkg\n        }\n      }\n      provider {\n        id\n        descriptor {\n          images\n          name\n          long_desc\n          short_desc\n          symbol\n        }\n        catalogs {\n          descriptor {\n            images\n            long_desc\n            name\n            short_desc\n            symbol\n          }\n          id\n          price {\n            maximum_value\n            offer_percent\n            offer_value\n            value\n          }\n        }\n      }\n      parent_item_id\n\n      city_code\n    }\n  }\n": types.GetProductByIdDocument,
    "\n  query GetSearchPageData(\n    $loc: Location!\n    $limit: Int\n    $cityCode: String!\n    $query: String!\n    $domain: String\n  ) {\n    getSearchPageData(\n      query: $query\n      loc: $loc\n      limit: $limit\n      cityCode: $cityCode\n      domain: $domain\n    ) {\n      catalogs {\n        id\n        provider_id\n        customizable\n        custom_group\n\n        city_code\n\n        descriptor {\n          name\n          short_desc\n          images\n        }\n        category_id\n        domain\n        price {\n          maximum_value\n          offer_percent\n          offer_value\n          value\n        }\n        time_to_ship_in_hours\n        domainName\n\n        provider {\n          descriptor {\n            symbol\n            name\n          }\n          calculated_max_offer {\n            percent\n          }\n\n          id\n        }\n        quantity {\n          unitized {\n            measure {\n              unit\n              value\n            }\n          }\n        }\n        geoLocation {\n          lat\n          lng\n        }\n        id\n      }\n      vendors {\n        id\n        domain\n        descriptor {\n          name\n        }\n      }\n    }\n  }\n": types.GetSearchPageDataDocument,
    "\n  query GetSearchSuggestion(\n    $loc: Location!\n    $cityCode: String!\n    $query: String!\n    $domain: String\n  ) {\n    getSearchSuggestion(\n      loc: $loc\n      cityCode: $cityCode\n      query: $query\n      domain: $domain\n    ) {\n      catalogs {\n        id\n        descriptor {\n          name\n          symbol\n        }\n        domain\n      }\n      vendors {\n        id\n        descriptor {\n          name\n          symbol\n        }\n        domain\n      }\n    }\n  }\n": types.GetSearchSuggestionDocument,
    "\n  #graphql\n  query GetAllAddresses {\n    getAllAddresses {\n      id\n      type\n      name\n      geoLocation {\n        lat\n        lng\n      }\n      receiver_phone\n      address {\n        line1\n        line2\n      }\n      city\n      state\n      pincode\n      landmark\n      isDefault\n      locality\n    }\n  }\n": types.GetAllAddressesDocument,
    "\n  #graphql\n  query GetAddressById($getAddressByIdId: String!) {\n    getAddressById(id: $getAddressByIdId) {\n      id\n      type\n      name\n      receiver_phone\n      address {\n        line1\n        line2\n      }\n      locality\n      city\n      state\n      pincode\n      landmark\n      directions\n      createdAt\n      geoLocation {\n        lat\n        lng\n      }\n      isDefault\n      updatedAt\n    }\n  }\n": types.GetAddressByIdDocument,
    "\n  #graphql\n  query Me {\n    me {\n      firstName\n    }\n  }\n": types.MeDocument,
    "\n  #graphql\n  mutation Mutation(\n    $firstName: String!\n    $lastName: String\n    $email: String\n    $phoneNumber: String\n  ) {\n    createUser(\n      firstName: $firstName\n      lastName: $lastName\n      email: $email\n      phoneNumber: $phoneNumber\n    ) {\n      token\n      id\n      firstName\n      lastName\n      email\n      password\n      countryCode\n      phoneNumber\n      dob\n      gender\n      createdAt\n      updatedAt\n    }\n  }\n": types.MutationDocument,
    "\n  #graphql\n  mutation CreateAddress(\n    $type: AddressType!\n    $name: String!\n    $geoLocation: Location!\n    $address: AddressLinesInputType!\n    $city: String!\n    $state: String!\n    $pincode: String!\n    $receiverPhone: String!\n    $locality: String\n    $landmark: String\n    $isDefault: Boolean\n    $directions: String\n  ) {\n    createAddress(\n      type: $type\n      name: $name\n      geoLocation: $geoLocation\n      address: $address\n      city: $city\n      state: $state\n      pincode: $pincode\n      receiver_phone: $receiverPhone\n      locality: $locality\n      landmark: $landmark\n      isDefault: $isDefault\n      directions: $directions\n    ) {\n      id\n      type\n      name\n      receiver_phone\n      geoLocation {\n        lat\n        lng\n      }\n      address {\n        line1\n        line2\n      }\n      locality\n      city\n      state\n      pincode\n      landmark\n      directions\n      isDefault\n      createdAt\n      updatedAt\n    }\n  }\n": types.CreateAddressDocument,
    "\n  #graphql\n  mutation DeleteAddress($deleteAddressId: String!) {\n    deleteAddress(id: $deleteAddressId) {\n      id\n      type\n      name\n      receiver_phone\n      geoLocation {\n        lat\n        lng\n      }\n      address {\n        line1\n        line2\n      }\n      locality\n      city\n      state\n      pincode\n      landmark\n      directions\n      isDefault\n      createdAt\n      updatedAt\n    }\n  }\n": types.DeleteAddressDocument,
    "\n  #graphql\n  mutation UpdateAddress($updateAddressId: String!, $isDefault: Boolean) {\n    updateAddress(id: $updateAddressId, isDefault: $isDefault) {\n      id\n    }\n  }\n": types.UpdateAddressDocument,
    "\n  #graphql\n  mutation UpdateAddressWithDetails(\n    $updateAddressId: String!\n    $isDefault: Boolean\n    $directions: String\n    $landmark: String\n    $pincode: String\n    $state: String\n    $city: String\n    $locality: String\n    $address: AddressLinesInputType\n    $geoLocation: Location\n    $receiverPhone: String\n    $name: String\n    $type: AddressType\n  ) {\n    updateAddress(\n      id: $updateAddressId\n      isDefault: $isDefault\n      directions: $directions\n      landmark: $landmark\n      pincode: $pincode\n      state: $state\n      city: $city\n      locality: $locality\n      address: $address\n      geoLocation: $geoLocation\n      receiver_phone: $receiverPhone\n      name: $name\n      type: $type\n    ) {\n      id\n    }\n  }\n": types.UpdateAddressWithDetailsDocument,
    "\n  query GetVendorById($getVendorByIdId: String!, $all: Boolean) {\n    getVendorById(id: $getVendorByIdId) {\n      id\n      panIndia\n      withinCity\n      hyperLocal\n      radius_in_metres\n      descriptor {\n        name\n        images\n        symbol\n      }\n      fssai_license_no\n      address {\n        area_code\n        city\n        locality\n        state\n        street\n      }\n      storeSections\n      domain\n      time_to_ship_in_hours {\n        avg\n        # max\n        # min\n        # max\n        # min\n      }\n      geoLocation {\n        lat\n        lng\n      }\n      catalogs(all: $all) {\n        category_id\n        id\n        descriptor {\n          name\n          images\n          symbol\n          long_desc\n          short_desc\n        }\n        # bpp_id\n        # location_id\n        # provider_id\n        veg\n        non_veg\n        price {\n          offer_value\n          offer_percent\n          maximum_value\n          value\n        }\n        category_id\n        quantity {\n          available {\n            count\n          }\n          maximum {\n            count\n          }\n        }\n        # tags {\n        #   code\n        #   list {\n        #     code\n        #     value\n        #   }\n        # }\n        # category_ids\n      }\n    }\n  }\n": types.GetVendorByIdDocument,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = graphql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function graphql(source: string): unknown;

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  #graphql\n  query GetAllCarts($withItemDetails: Boolean) {\n    getAllCarts(withItemDetails: $withItemDetails) {\n      id\n      items {\n        itemId\n        quantity\n        details {\n          descriptor {\n            name\n            symbol\n          }\n          price {\n            value\n            maximum_value\n          }\n          meta {\n            ondc_org_cancellable\n          }\n          quantity {\n            maximum {\n              count\n            }\n            available {\n              count\n            }\n          }\n          catalog_id\n          category_id\n        }\n      }\n      store {\n        id\n        descriptor {\n          name\n          symbol\n        }\n        domain\n        geoLocation {\n          lat\n          lng\n        }\n        address {\n          street\n        }\n      }\n      customizations {\n        baseItemId\n        details {\n          descriptor {\n            name\n          }\n          price {\n            value\n          }\n        }\n        itemId\n        quantity\n      }\n    }\n  }\n"): (typeof documents)["\n  #graphql\n  query GetAllCarts($withItemDetails: Boolean) {\n    getAllCarts(withItemDetails: $withItemDetails) {\n      id\n      items {\n        itemId\n        quantity\n        details {\n          descriptor {\n            name\n            symbol\n          }\n          price {\n            value\n            maximum_value\n          }\n          meta {\n            ondc_org_cancellable\n          }\n          quantity {\n            maximum {\n              count\n            }\n            available {\n              count\n            }\n          }\n          catalog_id\n          category_id\n        }\n      }\n      store {\n        id\n        descriptor {\n          name\n          symbol\n        }\n        domain\n        geoLocation {\n          lat\n          lng\n        }\n        address {\n          street\n        }\n      }\n      customizations {\n        baseItemId\n        details {\n          descriptor {\n            name\n          }\n          price {\n            value\n          }\n        }\n        itemId\n        quantity\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  #graphql\n  mutation AddItemToCart(\n    $vendorId: String!\n    $itemId: String!\n    $quantity: Int!\n    $customizations: [CartCustomItemInputType!]\n  ) {\n    addItemToCart(\n      vendor_id: $vendorId\n      itemId: $itemId\n      quantity: $quantity\n      customizations: $customizations\n    ) {\n      customizations {\n        baseItemId\n        itemId\n        quantity\n      }\n      id\n      storeId\n      items {\n        itemId\n        quantity\n      }\n      userId\n    }\n  }\n"): (typeof documents)["\n  #graphql\n  mutation AddItemToCart(\n    $vendorId: String!\n    $itemId: String!\n    $quantity: Int!\n    $customizations: [CartCustomItemInputType!]\n  ) {\n    addItemToCart(\n      vendor_id: $vendorId\n      itemId: $itemId\n      quantity: $quantity\n      customizations: $customizations\n    ) {\n      customizations {\n        baseItemId\n        itemId\n        quantity\n      }\n      id\n      storeId\n      items {\n        itemId\n        quantity\n      }\n      userId\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  #graphql\n  mutation ClearCart($vendorId: String!) {\n    clearCart(vendor_id: $vendorId)\n  }\n"): (typeof documents)["\n  #graphql\n  mutation ClearCart($vendorId: String!) {\n    clearCart(vendor_id: $vendorId)\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  #graphql\n  mutation clearAllCarts {\n    clearAllCarts\n  }\n"): (typeof documents)["\n  #graphql\n  mutation clearAllCarts {\n    clearAllCarts\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  #graphql\n  mutation RemoveItemFromCart($vendorId: String!, $itemId: String!) {\n    removeItemFromCart(vendor_id: $vendorId, itemId: $itemId) {\n      customizations {\n        baseItemId\n        itemId\n        quantity\n      }\n      id\n      items {\n        itemId\n        quantity\n      }\n      storeId\n      userId\n    }\n  }\n"): (typeof documents)["\n  #graphql\n  mutation RemoveItemFromCart($vendorId: String!, $itemId: String!) {\n    removeItemFromCart(vendor_id: $vendorId, itemId: $itemId) {\n      customizations {\n        baseItemId\n        itemId\n        quantity\n      }\n      id\n      items {\n        itemId\n        quantity\n      }\n      storeId\n      userId\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  #graphql\n  mutation UpdateItemQuantity(\n    $vendorId: String!\n    $itemId: String!\n    $quantity: Int!\n  ) {\n    updateItemQuantity(\n      vendor_id: $vendorId\n      itemId: $itemId\n      quantity: $quantity\n    ) {\n      customizations {\n        baseItemId\n        itemId\n        quantity\n      }\n      id\n      items {\n        itemId\n        quantity\n      }\n      storeId\n      userId\n    }\n  }\n"): (typeof documents)["\n  #graphql\n  mutation UpdateItemQuantity(\n    $vendorId: String!\n    $itemId: String!\n    $quantity: Int!\n  ) {\n    updateItemQuantity(\n      vendor_id: $vendorId\n      itemId: $itemId\n      quantity: $quantity\n    ) {\n      customizations {\n        baseItemId\n        itemId\n        quantity\n      }\n      id\n      items {\n        itemId\n        quantity\n      }\n      storeId\n      userId\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetDomainPageData(\n    $domain: String!\n    $loc: Location!\n    $cityCode: String!\n  ) {\n    getDomainPageData(domain: $domain, loc: $loc, cityCode: $cityCode) {\n      stores {\n        descriptor {\n          name\n          images\n          symbol\n        }\n        domain\n        id\n        distance\n        catalogs {\n          descriptor {\n            name\n            images\n            short_desc\n          }\n          id\n          category_id\n          price {\n            maximum_value\n            offer_percent\n            value\n          }\n          quantity {\n            available {\n              count\n            }\n            maximum {\n              count\n            }\n            unitized {\n              measure {\n                unit\n                value\n              }\n            }\n          }\n        }\n        address {\n          street\n        }\n        geoLocation {\n          lat\n          lng\n        }\n        calculated_max_offer {\n          percent\n        }\n        time_to_ship_in_hours {\n          avg\n        }\n      }\n      offers {\n        calculated_max_offer {\n          percent\n        }\n        descriptor {\n          name\n          symbol\n          images\n        }\n        id\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetDomainPageData(\n    $domain: String!\n    $loc: Location!\n    $cityCode: String!\n  ) {\n    getDomainPageData(domain: $domain, loc: $loc, cityCode: $cityCode) {\n      stores {\n        descriptor {\n          name\n          images\n          symbol\n        }\n        domain\n        id\n        distance\n        catalogs {\n          descriptor {\n            name\n            images\n            short_desc\n          }\n          id\n          category_id\n          price {\n            maximum_value\n            offer_percent\n            value\n          }\n          quantity {\n            available {\n              count\n            }\n            maximum {\n              count\n            }\n            unitized {\n              measure {\n                unit\n                value\n              }\n            }\n          }\n        }\n        address {\n          street\n        }\n        geoLocation {\n          lat\n          lng\n        }\n        calculated_max_offer {\n          percent\n        }\n        time_to_ship_in_hours {\n          avg\n        }\n      }\n      offers {\n        calculated_max_offer {\n          percent\n        }\n        descriptor {\n          name\n          symbol\n          images\n        }\n        id\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetUserFavourites {\n    getUserFavourites {\n      products\n      vendors\n    }\n  }\n"): (typeof documents)["\n  query GetUserFavourites {\n    getUserFavourites {\n      products\n      vendors\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation AddProductToFavs($productId: String!) {\n    addProductToFavs(productId: $productId) {\n      success\n      message\n    }\n  }\n"): (typeof documents)["\n  mutation AddProductToFavs($productId: String!) {\n    addProductToFavs(productId: $productId) {\n      success\n      message\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation RemoveProductFromFavs($productId: String!) {\n    removeProductFromFavs(productId: $productId) {\n      success\n      message\n    }\n  }\n"): (typeof documents)["\n  mutation RemoveProductFromFavs($productId: String!) {\n    removeProductFromFavs(productId: $productId) {\n      success\n      message\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetUserFavouritesWithDetails {\n    getUserFavouritesWithDetails {\n      products {\n        id\n        descriptor {\n          images\n          name\n        }\n        price {\n          maximum_value\n          offer_percent\n          offer_value\n          value\n        }\n        quantity {\n          available {\n            count\n          }\n          maximum {\n            count\n          }\n        }\n        provider {\n          descriptor {\n            name\n          }\n          panIndia\n          hyperLocal\n          address {\n            city\n            locality\n            state\n          }\n        }\n        vendor_id\n      }\n      vendors {\n        city_code\n        address {\n          locality\n          city\n          state\n        }\n\n        panIndia\n        provider_id\n        id\n        descriptor {\n          images\n          name\n          symbol\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetUserFavouritesWithDetails {\n    getUserFavouritesWithDetails {\n      products {\n        id\n        descriptor {\n          images\n          name\n        }\n        price {\n          maximum_value\n          offer_percent\n          offer_value\n          value\n        }\n        quantity {\n          available {\n            count\n          }\n          maximum {\n            count\n          }\n        }\n        provider {\n          descriptor {\n            name\n          }\n          panIndia\n          hyperLocal\n          address {\n            city\n            locality\n            state\n          }\n        }\n        vendor_id\n      }\n      vendors {\n        city_code\n        address {\n          locality\n          city\n          state\n        }\n\n        panIndia\n        provider_id\n        id\n        descriptor {\n          images\n          name\n          symbol\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation AddVendorToFavs($vendorId: String!) {\n    addVendorToFavs(vendorId: $vendorId) {\n      success\n      message\n    }\n  }\n"): (typeof documents)["\n  mutation AddVendorToFavs($vendorId: String!) {\n    addVendorToFavs(vendorId: $vendorId) {\n      success\n      message\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation RemoveVendorFromFavs($vendorId: String!) {\n    removeVendorFromFavs(vendorId: $vendorId) {\n      success\n      message\n    }\n  }\n"): (typeof documents)["\n  mutation RemoveVendorFromFavs($vendorId: String!) {\n    removeVendorFromFavs(vendorId: $vendorId) {\n      success\n      message\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  #graphql\n  query GetHome($loc: Location!, $cityCode: String!) {\n    getHome(loc: $loc, cityCode: $cityCode) {\n      offers {\n        descriptor {\n          name\n          short_desc\n          symbol\n        }\n        id\n        calculated_max_offer {\n          percent\n          value\n        }\n      }\n      restaurants {\n        distance\n        descriptor {\n          images\n          long_desc\n          name\n          short_desc\n          symbol\n        }\n        id\n        address {\n          locality\n        }\n        geoLocation {\n          lat\n          lng\n        }\n        provider_id\n        distance\n      }\n      stores {\n        distance\n        descriptor {\n          images\n          long_desc\n          name\n          short_desc\n          symbol\n        }\n        id\n        address {\n          locality\n        }\n        geoLocation {\n          lat\n          lng\n        }\n        provider_id\n        distance\n      }\n    }\n  }\n"): (typeof documents)["\n  #graphql\n  query GetHome($loc: Location!, $cityCode: String!) {\n    getHome(loc: $loc, cityCode: $cityCode) {\n      offers {\n        descriptor {\n          name\n          short_desc\n          symbol\n        }\n        id\n        calculated_max_offer {\n          percent\n          value\n        }\n      }\n      restaurants {\n        distance\n        descriptor {\n          images\n          long_desc\n          name\n          short_desc\n          symbol\n        }\n        id\n        address {\n          locality\n        }\n        geoLocation {\n          lat\n          lng\n        }\n        provider_id\n        distance\n      }\n      stores {\n        distance\n        descriptor {\n          images\n          long_desc\n          name\n          short_desc\n          symbol\n        }\n        id\n        address {\n          locality\n        }\n        geoLocation {\n          lat\n          lng\n        }\n        provider_id\n        distance\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  #graphql\n  mutation GenerateOTP($sendTo: String!) {\n    generateOTP(sendTo: $sendTo) {\n      message\n      orderId\n    }\n  }\n"): (typeof documents)["\n  #graphql\n  mutation GenerateOTP($sendTo: String!) {\n    generateOTP(sendTo: $sendTo) {\n      message\n      orderId\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  #graphql\n  mutation VerifyOTP($orderId: String!, $otp: String!, $sendTo: String!) {\n    verifyOTP(orderId: $orderId, otp: $otp, sendTo: $sendTo) {\n      token\n      user {\n        firstName\n        # savedAddresses {\n        #   id\n        #   type\n        #   name\n        #   address {\n        #     line1\n        #     line2\n        #   }\n        #   locality\n        #   city\n        #   state\n        #   pincode\n        #   isDefault\n        # }\n        phoneNumber\n        email\n        lastName\n        id\n      }\n      isOTPVerified\n    }\n  }\n"): (typeof documents)["\n  #graphql\n  mutation VerifyOTP($orderId: String!, $otp: String!, $sendTo: String!) {\n    verifyOTP(orderId: $orderId, otp: $otp, sendTo: $sendTo) {\n      token\n      user {\n        firstName\n        # savedAddresses {\n        #   id\n        #   type\n        #   name\n        #   address {\n        #     line1\n        #     line2\n        #   }\n        #   locality\n        #   city\n        #   state\n        #   pincode\n        #   isDefault\n        # }\n        phoneNumber\n        email\n        lastName\n        id\n      }\n      isOTPVerified\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  #graphql\n  mutation ResendOTP($orderId: String!) {\n    resendOTP(orderId: $orderId) {\n      message\n      orderId\n    }\n  }\n"): (typeof documents)["\n  #graphql\n  mutation ResendOTP($orderId: String!) {\n    resendOTP(orderId: $orderId) {\n      message\n      orderId\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  #graphql\n  query GetAllOrdersByUser {\n    getAllOrdersByUser {\n      id\n      fulfillments {\n        pending {\n          state {\n            descriptor {\n              code\n            }\n          }\n        }\n        packed {\n          state {\n            descriptor {\n              code\n            }\n          }\n        }\n        agent_assigned {\n          state {\n            descriptor {\n              code\n            }\n          }\n        }\n        out_for_pickup {\n          state {\n            descriptor {\n              code\n            }\n          }\n        }\n        pickup_failed {\n          state {\n            descriptor {\n              code\n            }\n          }\n        }\n        order_picked_up {\n          state {\n            descriptor {\n              code\n            }\n          }\n        }\n        in_transit {\n          state {\n            descriptor {\n              code\n            }\n          }\n        }\n        at_destination_hub {\n          state {\n            descriptor {\n              code\n            }\n          }\n        }\n        out_for_delivery {\n          state {\n            descriptor {\n              code\n            }\n          }\n        }\n        delivery_failed {\n          state {\n            descriptor {\n              code\n            }\n          }\n        }\n        order_delivered {\n          state {\n            descriptor {\n              code\n            }\n          }\n        }\n        cancelled {\n          state {\n            descriptor {\n              code\n            }\n          }\n        }\n      }\n      items {\n        details {\n          descriptor {\n            name\n            symbol\n          }\n          catalog_id\n        }\n      }\n      order_status\n      quote {\n        breakup {\n          details {\n            price {\n              value\n            }\n          }\n          price {\n            value\n          }\n          quantity {\n            count\n          }\n          type\n          title\n          id\n        }\n        price {\n          value\n        }\n      }\n      store {\n        descriptor {\n          symbol\n          name\n        }\n        address {\n          street\n        }\n      }\n      placed_at\n      completed_at\n      cancelled_at\n      cancellation {\n        reason {\n          reason\n        }\n        cancelled_by\n      }\n    }\n  }\n"): (typeof documents)["\n  #graphql\n  query GetAllOrdersByUser {\n    getAllOrdersByUser {\n      id\n      fulfillments {\n        pending {\n          state {\n            descriptor {\n              code\n            }\n          }\n        }\n        packed {\n          state {\n            descriptor {\n              code\n            }\n          }\n        }\n        agent_assigned {\n          state {\n            descriptor {\n              code\n            }\n          }\n        }\n        out_for_pickup {\n          state {\n            descriptor {\n              code\n            }\n          }\n        }\n        pickup_failed {\n          state {\n            descriptor {\n              code\n            }\n          }\n        }\n        order_picked_up {\n          state {\n            descriptor {\n              code\n            }\n          }\n        }\n        in_transit {\n          state {\n            descriptor {\n              code\n            }\n          }\n        }\n        at_destination_hub {\n          state {\n            descriptor {\n              code\n            }\n          }\n        }\n        out_for_delivery {\n          state {\n            descriptor {\n              code\n            }\n          }\n        }\n        delivery_failed {\n          state {\n            descriptor {\n              code\n            }\n          }\n        }\n        order_delivered {\n          state {\n            descriptor {\n              code\n            }\n          }\n        }\n        cancelled {\n          state {\n            descriptor {\n              code\n            }\n          }\n        }\n      }\n      items {\n        details {\n          descriptor {\n            name\n            symbol\n          }\n          catalog_id\n        }\n      }\n      order_status\n      quote {\n        breakup {\n          details {\n            price {\n              value\n            }\n          }\n          price {\n            value\n          }\n          quantity {\n            count\n          }\n          type\n          title\n          id\n        }\n        price {\n          value\n        }\n      }\n      store {\n        descriptor {\n          symbol\n          name\n        }\n        address {\n          street\n        }\n      }\n      placed_at\n      completed_at\n      cancelled_at\n      cancellation {\n        reason {\n          reason\n        }\n        cancelled_by\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetAllReasonCodes {\n    #graphql\n    getAllReasonCodes {\n      reason\n      is_trigger_rto\n      is_applicable_for_part_cancel\n      id\n      cost_attributed_to\n      code_for\n      comment\n      code\n    }\n  }\n"): (typeof documents)["\n  query GetAllReasonCodes {\n    #graphql\n    getAllReasonCodes {\n      reason\n      is_trigger_rto\n      is_applicable_for_part_cancel\n      id\n      cost_attributed_to\n      code_for\n      comment\n      code\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetProductById($getProductByIdId: String!) {\n    getProductById(id: $getProductByIdId) {\n      descriptor {\n        images\n        long_desc\n        name\n        short_desc\n        symbol\n      }\n      custom_group\n\n      customizable\n      attributes\n      domain\n      variants\n      attributes\n      domainName\n      price {\n        maximum_value\n        offer_percent\n        offer_value\n        value\n      }\n      quantity {\n        available {\n          count\n        }\n        maximum {\n          count\n        }\n        unitized {\n          measure {\n            unit\n            value\n          }\n        }\n      }\n      time_to_ship_in_hours\n      custom_group\n\n      meta {\n        ondc_org_cancellable\n        ondc_org_available_on_cod\n        ondc_org_contact_details_consumer_care\n        ondc_org_fssai_license_no\n        ondc_org_mandatory_reqs_veggies_fruits {\n          net_quantity\n        }\n        ondc_org_return_window\n        ondc_org_returnable\n        ondc_org_seller_pickup_return\n        ondc_org_statutory_reqs_packaged_commodities {\n          common_or_generic_name_of_commodity\n          manufacturer_or_packer_address\n          manufacturer_or_packer_name\n          month_year_of_manufacture_packing_import\n          net_quantity_or_measure_of_commodity_in_pkg\n        }\n      }\n      provider {\n        id\n        descriptor {\n          images\n          name\n          long_desc\n          short_desc\n          symbol\n        }\n        catalogs {\n          descriptor {\n            images\n            long_desc\n            name\n            short_desc\n            symbol\n          }\n          id\n          price {\n            maximum_value\n            offer_percent\n            offer_value\n            value\n          }\n        }\n      }\n      parent_item_id\n\n      city_code\n    }\n  }\n"): (typeof documents)["\n  query GetProductById($getProductByIdId: String!) {\n    getProductById(id: $getProductByIdId) {\n      descriptor {\n        images\n        long_desc\n        name\n        short_desc\n        symbol\n      }\n      custom_group\n\n      customizable\n      attributes\n      domain\n      variants\n      attributes\n      domainName\n      price {\n        maximum_value\n        offer_percent\n        offer_value\n        value\n      }\n      quantity {\n        available {\n          count\n        }\n        maximum {\n          count\n        }\n        unitized {\n          measure {\n            unit\n            value\n          }\n        }\n      }\n      time_to_ship_in_hours\n      custom_group\n\n      meta {\n        ondc_org_cancellable\n        ondc_org_available_on_cod\n        ondc_org_contact_details_consumer_care\n        ondc_org_fssai_license_no\n        ondc_org_mandatory_reqs_veggies_fruits {\n          net_quantity\n        }\n        ondc_org_return_window\n        ondc_org_returnable\n        ondc_org_seller_pickup_return\n        ondc_org_statutory_reqs_packaged_commodities {\n          common_or_generic_name_of_commodity\n          manufacturer_or_packer_address\n          manufacturer_or_packer_name\n          month_year_of_manufacture_packing_import\n          net_quantity_or_measure_of_commodity_in_pkg\n        }\n      }\n      provider {\n        id\n        descriptor {\n          images\n          name\n          long_desc\n          short_desc\n          symbol\n        }\n        catalogs {\n          descriptor {\n            images\n            long_desc\n            name\n            short_desc\n            symbol\n          }\n          id\n          price {\n            maximum_value\n            offer_percent\n            offer_value\n            value\n          }\n        }\n      }\n      parent_item_id\n\n      city_code\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetSearchPageData(\n    $loc: Location!\n    $limit: Int\n    $cityCode: String!\n    $query: String!\n    $domain: String\n  ) {\n    getSearchPageData(\n      query: $query\n      loc: $loc\n      limit: $limit\n      cityCode: $cityCode\n      domain: $domain\n    ) {\n      catalogs {\n        id\n        provider_id\n        customizable\n        custom_group\n\n        city_code\n\n        descriptor {\n          name\n          short_desc\n          images\n        }\n        category_id\n        domain\n        price {\n          maximum_value\n          offer_percent\n          offer_value\n          value\n        }\n        time_to_ship_in_hours\n        domainName\n\n        provider {\n          descriptor {\n            symbol\n            name\n          }\n          calculated_max_offer {\n            percent\n          }\n\n          id\n        }\n        quantity {\n          unitized {\n            measure {\n              unit\n              value\n            }\n          }\n        }\n        geoLocation {\n          lat\n          lng\n        }\n        id\n      }\n      vendors {\n        id\n        domain\n        descriptor {\n          name\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetSearchPageData(\n    $loc: Location!\n    $limit: Int\n    $cityCode: String!\n    $query: String!\n    $domain: String\n  ) {\n    getSearchPageData(\n      query: $query\n      loc: $loc\n      limit: $limit\n      cityCode: $cityCode\n      domain: $domain\n    ) {\n      catalogs {\n        id\n        provider_id\n        customizable\n        custom_group\n\n        city_code\n\n        descriptor {\n          name\n          short_desc\n          images\n        }\n        category_id\n        domain\n        price {\n          maximum_value\n          offer_percent\n          offer_value\n          value\n        }\n        time_to_ship_in_hours\n        domainName\n\n        provider {\n          descriptor {\n            symbol\n            name\n          }\n          calculated_max_offer {\n            percent\n          }\n\n          id\n        }\n        quantity {\n          unitized {\n            measure {\n              unit\n              value\n            }\n          }\n        }\n        geoLocation {\n          lat\n          lng\n        }\n        id\n      }\n      vendors {\n        id\n        domain\n        descriptor {\n          name\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetSearchSuggestion(\n    $loc: Location!\n    $cityCode: String!\n    $query: String!\n    $domain: String\n  ) {\n    getSearchSuggestion(\n      loc: $loc\n      cityCode: $cityCode\n      query: $query\n      domain: $domain\n    ) {\n      catalogs {\n        id\n        descriptor {\n          name\n          symbol\n        }\n        domain\n      }\n      vendors {\n        id\n        descriptor {\n          name\n          symbol\n        }\n        domain\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetSearchSuggestion(\n    $loc: Location!\n    $cityCode: String!\n    $query: String!\n    $domain: String\n  ) {\n    getSearchSuggestion(\n      loc: $loc\n      cityCode: $cityCode\n      query: $query\n      domain: $domain\n    ) {\n      catalogs {\n        id\n        descriptor {\n          name\n          symbol\n        }\n        domain\n      }\n      vendors {\n        id\n        descriptor {\n          name\n          symbol\n        }\n        domain\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  #graphql\n  query GetAllAddresses {\n    getAllAddresses {\n      id\n      type\n      name\n      geoLocation {\n        lat\n        lng\n      }\n      receiver_phone\n      address {\n        line1\n        line2\n      }\n      city\n      state\n      pincode\n      landmark\n      isDefault\n      locality\n    }\n  }\n"): (typeof documents)["\n  #graphql\n  query GetAllAddresses {\n    getAllAddresses {\n      id\n      type\n      name\n      geoLocation {\n        lat\n        lng\n      }\n      receiver_phone\n      address {\n        line1\n        line2\n      }\n      city\n      state\n      pincode\n      landmark\n      isDefault\n      locality\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  #graphql\n  query GetAddressById($getAddressByIdId: String!) {\n    getAddressById(id: $getAddressByIdId) {\n      id\n      type\n      name\n      receiver_phone\n      address {\n        line1\n        line2\n      }\n      locality\n      city\n      state\n      pincode\n      landmark\n      directions\n      createdAt\n      geoLocation {\n        lat\n        lng\n      }\n      isDefault\n      updatedAt\n    }\n  }\n"): (typeof documents)["\n  #graphql\n  query GetAddressById($getAddressByIdId: String!) {\n    getAddressById(id: $getAddressByIdId) {\n      id\n      type\n      name\n      receiver_phone\n      address {\n        line1\n        line2\n      }\n      locality\n      city\n      state\n      pincode\n      landmark\n      directions\n      createdAt\n      geoLocation {\n        lat\n        lng\n      }\n      isDefault\n      updatedAt\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  #graphql\n  query Me {\n    me {\n      firstName\n    }\n  }\n"): (typeof documents)["\n  #graphql\n  query Me {\n    me {\n      firstName\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  #graphql\n  mutation Mutation(\n    $firstName: String!\n    $lastName: String\n    $email: String\n    $phoneNumber: String\n  ) {\n    createUser(\n      firstName: $firstName\n      lastName: $lastName\n      email: $email\n      phoneNumber: $phoneNumber\n    ) {\n      token\n      id\n      firstName\n      lastName\n      email\n      password\n      countryCode\n      phoneNumber\n      dob\n      gender\n      createdAt\n      updatedAt\n    }\n  }\n"): (typeof documents)["\n  #graphql\n  mutation Mutation(\n    $firstName: String!\n    $lastName: String\n    $email: String\n    $phoneNumber: String\n  ) {\n    createUser(\n      firstName: $firstName\n      lastName: $lastName\n      email: $email\n      phoneNumber: $phoneNumber\n    ) {\n      token\n      id\n      firstName\n      lastName\n      email\n      password\n      countryCode\n      phoneNumber\n      dob\n      gender\n      createdAt\n      updatedAt\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  #graphql\n  mutation CreateAddress(\n    $type: AddressType!\n    $name: String!\n    $geoLocation: Location!\n    $address: AddressLinesInputType!\n    $city: String!\n    $state: String!\n    $pincode: String!\n    $receiverPhone: String!\n    $locality: String\n    $landmark: String\n    $isDefault: Boolean\n    $directions: String\n  ) {\n    createAddress(\n      type: $type\n      name: $name\n      geoLocation: $geoLocation\n      address: $address\n      city: $city\n      state: $state\n      pincode: $pincode\n      receiver_phone: $receiverPhone\n      locality: $locality\n      landmark: $landmark\n      isDefault: $isDefault\n      directions: $directions\n    ) {\n      id\n      type\n      name\n      receiver_phone\n      geoLocation {\n        lat\n        lng\n      }\n      address {\n        line1\n        line2\n      }\n      locality\n      city\n      state\n      pincode\n      landmark\n      directions\n      isDefault\n      createdAt\n      updatedAt\n    }\n  }\n"): (typeof documents)["\n  #graphql\n  mutation CreateAddress(\n    $type: AddressType!\n    $name: String!\n    $geoLocation: Location!\n    $address: AddressLinesInputType!\n    $city: String!\n    $state: String!\n    $pincode: String!\n    $receiverPhone: String!\n    $locality: String\n    $landmark: String\n    $isDefault: Boolean\n    $directions: String\n  ) {\n    createAddress(\n      type: $type\n      name: $name\n      geoLocation: $geoLocation\n      address: $address\n      city: $city\n      state: $state\n      pincode: $pincode\n      receiver_phone: $receiverPhone\n      locality: $locality\n      landmark: $landmark\n      isDefault: $isDefault\n      directions: $directions\n    ) {\n      id\n      type\n      name\n      receiver_phone\n      geoLocation {\n        lat\n        lng\n      }\n      address {\n        line1\n        line2\n      }\n      locality\n      city\n      state\n      pincode\n      landmark\n      directions\n      isDefault\n      createdAt\n      updatedAt\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  #graphql\n  mutation DeleteAddress($deleteAddressId: String!) {\n    deleteAddress(id: $deleteAddressId) {\n      id\n      type\n      name\n      receiver_phone\n      geoLocation {\n        lat\n        lng\n      }\n      address {\n        line1\n        line2\n      }\n      locality\n      city\n      state\n      pincode\n      landmark\n      directions\n      isDefault\n      createdAt\n      updatedAt\n    }\n  }\n"): (typeof documents)["\n  #graphql\n  mutation DeleteAddress($deleteAddressId: String!) {\n    deleteAddress(id: $deleteAddressId) {\n      id\n      type\n      name\n      receiver_phone\n      geoLocation {\n        lat\n        lng\n      }\n      address {\n        line1\n        line2\n      }\n      locality\n      city\n      state\n      pincode\n      landmark\n      directions\n      isDefault\n      createdAt\n      updatedAt\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  #graphql\n  mutation UpdateAddress($updateAddressId: String!, $isDefault: Boolean) {\n    updateAddress(id: $updateAddressId, isDefault: $isDefault) {\n      id\n    }\n  }\n"): (typeof documents)["\n  #graphql\n  mutation UpdateAddress($updateAddressId: String!, $isDefault: Boolean) {\n    updateAddress(id: $updateAddressId, isDefault: $isDefault) {\n      id\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  #graphql\n  mutation UpdateAddressWithDetails(\n    $updateAddressId: String!\n    $isDefault: Boolean\n    $directions: String\n    $landmark: String\n    $pincode: String\n    $state: String\n    $city: String\n    $locality: String\n    $address: AddressLinesInputType\n    $geoLocation: Location\n    $receiverPhone: String\n    $name: String\n    $type: AddressType\n  ) {\n    updateAddress(\n      id: $updateAddressId\n      isDefault: $isDefault\n      directions: $directions\n      landmark: $landmark\n      pincode: $pincode\n      state: $state\n      city: $city\n      locality: $locality\n      address: $address\n      geoLocation: $geoLocation\n      receiver_phone: $receiverPhone\n      name: $name\n      type: $type\n    ) {\n      id\n    }\n  }\n"): (typeof documents)["\n  #graphql\n  mutation UpdateAddressWithDetails(\n    $updateAddressId: String!\n    $isDefault: Boolean\n    $directions: String\n    $landmark: String\n    $pincode: String\n    $state: String\n    $city: String\n    $locality: String\n    $address: AddressLinesInputType\n    $geoLocation: Location\n    $receiverPhone: String\n    $name: String\n    $type: AddressType\n  ) {\n    updateAddress(\n      id: $updateAddressId\n      isDefault: $isDefault\n      directions: $directions\n      landmark: $landmark\n      pincode: $pincode\n      state: $state\n      city: $city\n      locality: $locality\n      address: $address\n      geoLocation: $geoLocation\n      receiver_phone: $receiverPhone\n      name: $name\n      type: $type\n    ) {\n      id\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetVendorById($getVendorByIdId: String!, $all: Boolean) {\n    getVendorById(id: $getVendorByIdId) {\n      id\n      panIndia\n      withinCity\n      hyperLocal\n      radius_in_metres\n      descriptor {\n        name\n        images\n        symbol\n      }\n      fssai_license_no\n      address {\n        area_code\n        city\n        locality\n        state\n        street\n      }\n      storeSections\n      domain\n      time_to_ship_in_hours {\n        avg\n        # max\n        # min\n        # max\n        # min\n      }\n      geoLocation {\n        lat\n        lng\n      }\n      catalogs(all: $all) {\n        category_id\n        id\n        descriptor {\n          name\n          images\n          symbol\n          long_desc\n          short_desc\n        }\n        # bpp_id\n        # location_id\n        # provider_id\n        veg\n        non_veg\n        price {\n          offer_value\n          offer_percent\n          maximum_value\n          value\n        }\n        category_id\n        quantity {\n          available {\n            count\n          }\n          maximum {\n            count\n          }\n        }\n        # tags {\n        #   code\n        #   list {\n        #     code\n        #     value\n        #   }\n        # }\n        # category_ids\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetVendorById($getVendorByIdId: String!, $all: Boolean) {\n    getVendorById(id: $getVendorByIdId) {\n      id\n      panIndia\n      withinCity\n      hyperLocal\n      radius_in_metres\n      descriptor {\n        name\n        images\n        symbol\n      }\n      fssai_license_no\n      address {\n        area_code\n        city\n        locality\n        state\n        street\n      }\n      storeSections\n      domain\n      time_to_ship_in_hours {\n        avg\n        # max\n        # min\n        # max\n        # min\n      }\n      geoLocation {\n        lat\n        lng\n      }\n      catalogs(all: $all) {\n        category_id\n        id\n        descriptor {\n          name\n          images\n          symbol\n          long_desc\n          short_desc\n        }\n        # bpp_id\n        # location_id\n        # provider_id\n        veg\n        non_veg\n        price {\n          offer_value\n          offer_percent\n          maximum_value\n          value\n        }\n        category_id\n        quantity {\n          available {\n            count\n          }\n          maximum {\n            count\n          }\n        }\n        # tags {\n        #   code\n        #   list {\n        #     code\n        #     value\n        #   }\n        # }\n        # category_ids\n      }\n    }\n  }\n"];

export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;